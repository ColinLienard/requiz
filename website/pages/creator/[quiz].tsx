import { useReducer, useState } from 'react';
import { GetServerSideProps, NextPage } from 'next';
import { getSession } from 'next-auth/react';
import Head from 'next/head';
import Link from 'next/link';
import { ObjectId } from 'mongodb';
import SettingBar from '../../components/Creator/SettingBar/SettingBar';
import QuizEditor from '../../components/Creator/QuizEditor/QuizEditor';
import { EditorContext, questionsReducer } from '../../lib/contexts/EditorContext';
import clientPromise from '../../lib/utils/mongodb';
import { QuizData, UserFromDB } from '../../lib/types';

type Props = {
  quizId: string,
  quizData?: QuizData
}

const Creator: NextPage<Props> = ({ quizId, quizData }: Props) => {
  const [settings, setSettings] = useState<QuizData>();
  const [questions, dispatchQuestions] = useReducer(questionsReducer, quizData?.questions);

  const saveData = async () => {
    const response = await fetch('/api/save-quiz', {
      method: 'POST',
      body: JSON.stringify({
        quizId,
        ...settings,
        questions,
      }),
    });
    if (response.ok) {
      /* TODO: handle quiz is saved */
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Link href="/">
          <a>Home</a>
        </Link>
        <h1>Quiz creator</h1>
        <br />
        <SettingBar setSettings={setSettings} defaultData={quizData} />
        <br />
        <EditorContext.Provider value={{ questions, dispatchQuestions }}>
          <QuizEditor />
        </EditorContext.Provider>
        <br />
        <button type="button" onClick={saveData}>Save</button>
        <br />
        <button type="button" onClick={saveData}>Publish</button>
      </main>
    </>
  );
};

Creator.defaultProps = {
  quizData: {},
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getSession(context);
  if (!session) {
    return {
      redirect: {
        permanent: false,
        destination: '/auth/signin',
      },
      props: {},
    };
  }

  const quiz = context.params?.quiz as string | undefined;
  if (!quiz) {
    return {
      redirect: {
        permanent: false,
        destination: '/',
      },
      props: {},
    };
  }
  if (quiz === 'new') {
    const { id: userId } = session.user as UserFromDB;
    const client = await clientPromise;
    const response = await client.db().collection('quizzes').insertOne({ userId });
    const quizId = response.insertedId.toHexString();
    client.close();

    return {
      props: {
        quizId,
      },
    };
  }
  const client = await clientPromise;
  const response = await client.db().collection('quizzes').findOne({ _id: new ObjectId(quiz) });
  if (response) {
    response._id = response?._id.toHexString();
  }

  return {
    props: {
      quizId: quiz,
      quizData: response,
    },
  };
};

export default Creator;
