import { useEffect, useState } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { io, Socket } from 'socket.io-client';
import { useSession } from 'next-auth/react';
import Chat from '../../components/Quiz/Chat/Chat';
import Sidebar from '../../components/Quiz/Sidebar/Sidebar';
import WaitingRoom from '../../components/Quiz/WaitingRoom/WaitingRoom';
import Question from '../../components/Quiz/Question/Question';
import Results from '../../components/Quiz/Results/Results';
import SocketContext from '../../lib/contexts/SocketContext';
import { GameState, UserFromDB } from '../../lib/types';
import styles from '../../styles/pages/Quiz.module.scss';

const Quiz: NextPage = () => {
  const { data: session } = useSession();
  const { id: userId, name: userName } = session?.user as UserFromDB;
  const router = useRouter();
  const { quiz } = router.query;
  const [socket, setSocket] = useState<Socket>();
  const [gameState, setGameState] = useState<GameState>('waiting');
  const [connected, setConnected] = useState(false);

  useEffect(() => {
    if (process.env.NEXT_PUBLIC_SERVER_URL) {
      setSocket(io(process.env.NEXT_PUBLIC_SERVER_URL));
    } else {
      router.push('/?error=socket-connection', '/');
    }

    return () => {
      socket?.close();
    };
  }, []);

  useEffect(() => {
    socket?.on('connect', () => {
      setConnected(true);

      socket?.on('game-started', () => {
        router.push('/?error=game-started', '/');
      });

      socket?.on('game-full', () => {
        router.push('/?error=game-full', '/');
      });

      socket?.on('game-state', (newGameState: GameState) => {
        setGameState(newGameState);
      });
    });
  }, [socket]);

  const renderGameState = () => {
    switch (gameState) {
      case 'waiting':
        return (
          <WaitingRoom />
        );
      case 'playing':
        return (
          <Question />
        );
      case 'end':
        return (
          <Results />
        );
      default:
        return null;
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {socket && connected && (
          <SocketContext.Provider value={socket}>
            <Sidebar
              userName={userName}
              userId={userId}
            />
            <section className={styles.game}>
              {renderGameState()}
            </section>
            <Chat
              userName={userName}
              userId={userId}
              roomId={quiz as string}
            />
          </SocketContext.Provider>
        )}
      </main>
    </>
  );
};

export default Quiz;
