import {
  useReducer,
  useState,
  useCallback,
  useMemo,
  useRef,
} from 'react';
import { GetServerSideProps, NextPage } from 'next';
import { getSession } from 'next-auth/react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { ObjectId } from 'mongodb';
import SettingBar from '../../components/Creator/SettingBar/SettingBar';
import Particules from '../../components/Common/Particules/Particules';
import QuizEditor from '../../components/Creator/QuizEditor/QuizEditor';
import Alert, { AlertHandle } from '../../components/Common/Alert/Alert';
import { GetQuestionsContext, DispatchQuestionsContext, questionsReducer } from '../../lib/contexts/EditorContext';
import QuizStatusIndicator from '../../components/Common/QuizStatusIndicator/QuizStatusIndicator';
import useMobile from '../../lib/hooks/useMobile';
import useIntersection from '../../lib/hooks/useIntersection';
import clientPromise from '../../lib/utils/mongodb';
import isNotEmpty from '../../lib/utils/isNotEmpty';
import MenuIcon from '../../public/icons/iconComponents/MenuIcon';
import { QuizData, UserFromDB } from '../../lib/types';
import styles from '../../styles/pages/Creator.module.scss';

type Props = {
  quizId: string,
  quizData?: QuizData,
};

const Creator: NextPage<Props> = ({ quizId, quizData }: Props) => {
  const [settings, setSettings] = useState<QuizData | undefined>(quizData);
  const [questions, dispatchQuestions] = useReducer(questionsReducer, quizData?.questions);
  const [settingBarVisible, setSettingBarVisible] = useState(false);
  const [scrolled, setScrolled] = useState(false);
  const alert = useRef<AlertHandle>(null);
  const router = useRouter();
  const isMobile = useMobile();
  const intersection = useIntersection(
    isMobile ? 96 : 128,
    useCallback(() => setScrolled(true), []),
    useCallback(() => setScrolled(false), []),
  );

  const saveQuiz = useCallback(async (publish: boolean) => {
    const response = await fetch('/api/save-quiz', {
      method: 'POST',
      body: JSON.stringify({
        _id: quizId,
        ...settings,
        questions,
        status: publish ? 'published' : 'draft',
      }),
    });
    if (response.ok) {
      alert.current?.setType('success');
      alert.current?.setContent(`Your quiz has been ${publish ? 'published' : 'saved'} !`);
    } else {
      alert.current?.setType('error');
      alert.current?.setContent('Your quiz cannot be saved for an unknown reason...');
    }
  }, [settings, questions]);

  const handleSaveQuiz = useCallback(() => {
    if (settings?.title !== '') {
      saveQuiz(false);
    } else {
      alert.current?.setType('error');
      alert.current?.setContent('You must a least provide a title for your quiz to be saved.');
    }
  }, [settings]);

  const publishQuiz = useCallback(() => {
    if (settings && questions && questions.length > 3 && isNotEmpty({ ...settings, questions })) {
      saveQuiz(true);
    } else {
      alert.current?.setType('error');
      alert.current?.setContent('Your quiz cannot be published. Make sure that all fields are completed and that you have created at list 3 questions.');
    }
  }, [settings, questions]);

  const deleteQuiz = useCallback(async () => {
    const response = await fetch('/api/delete-quiz', {
      method: 'POST',
      body: quizId,
    });
    if (response.ok) {
      router.push('/?alert=quiz-succesfully-deleted', '/');
    } else {
      alert.current?.setType('error');
      alert.current?.setContent('Your quiz cannot be deleted for an unknown reason...');
    }
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Particules />
      <div className={styles.wrapper}>
        <main className={styles.main}>
          {intersection}
          <Alert ref={alert} />
          <header className={`${styles.header} ${scrolled && styles.background}`}>
            <div className={styles.heroContainer}>
              <h1 className={styles.hero}>{settings?.title || 'Your new quiz'}</h1>
              <QuizStatusIndicator status={settings?.status} />
            </div>
            {isMobile && (
              <button className={styles.menu} onClick={() => setSettingBarVisible(true)} type="button">
                <MenuIcon />
              </button>
            )}
            <div className={styles.buttonContainer}>
              <button className={`${styles.button} ${styles.blue}`} type="button" onClick={handleSaveQuiz}>Save</button>
              <button className={`${styles.button} ${styles.green}`} type="button" onClick={publishQuiz}>Publish</button>
              <button className={`${styles.button} ${styles.red}`} type="button" onClick={deleteQuiz}>Delete quiz</button>
            </div>
          </header>
          <div className={styles.gradient} />
          <GetQuestionsContext.Provider value={questions}>
            <DispatchQuestionsContext.Provider value={useMemo(() => dispatchQuestions, [])}>
              <QuizEditor />
            </DispatchQuestionsContext.Provider>
          </GetQuestionsContext.Provider>
        </main>
        <SettingBar
          visible={settingBarVisible}
          hide={() => setSettingBarVisible(false)}
          setSettings={setSettings}
          defaultData={quizData}
        />
      </div>
    </>
  );
};

Creator.defaultProps = {
  quizData: {
    status: 'draft',
    questions: [
      {
        id: 1,
        question: '',
        responses: [
          { id: 1, value: '' },
          { id: 2, value: '' },
        ],
        correct: 0,
      },
    ],
  },
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getSession(context);
  if (!session) {
    return {
      redirect: {
        permanent: false,
        destination: '/auth/signin',
      },
      props: {},
    };
  }

  const quiz = context.params?.quiz as string | undefined;
  if (!quiz) {
    return {
      redirect: {
        permanent: false,
        destination: '/',
      },
      props: {},
    };
  }
  const client = await clientPromise;
  if (quiz === 'new') {
    const { _id: userId } = session.user as UserFromDB;
    const response = await client.db().collection('quizzes').insertOne({ userId });
    const quizId = response.insertedId.toHexString();
    client.close();

    return {
      props: {
        quizId,
      },
    };
  }
  const response: { _id: ObjectId | string } | null = await client
    .db()
    .collection('quizzes')
    .findOne({ _id: new ObjectId(quiz) });
  if (response && (response as QuizData).userId === (session.user as UserFromDB)._id) {
    response._id = quiz;

    return {
      props: {
        quizId: quiz,
        quizData: response,
      },
    };
  }

  return {
    redirect: {
      permanent: false,
      destination: '/',
    },
    props: {},
  };
};

export default Creator;
