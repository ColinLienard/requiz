/* eslint-disable jsx-a11y/label-has-associated-control */
import { FormEvent, useState } from 'react';
import { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { getSession, signIn, getCsrfToken } from 'next-auth/react';
import authErrorIndex from '../../lib/utils/authErrorIndex';
import PasswordInput from '../../components/Common/PasswordInput/PasswordInput';
import Particules from '../../components/Common/Particules/Particules';
import Navbar from '../../components/Common/Navbar/Navbar';
import styles from '../../styles/pages/Signin.module.scss';

type Props = {
  csrfToken: string,
};

type Value = {
  value: string,
};

interface SignInFormData extends EventTarget {
  email: Value,
  password: Value,
}

interface SignUpFormData extends EventTarget {
  name: Value,
  email: Value,
  password: Value,
  confirmPassword: Value,
}

const SignIn: NextPage<Props> = ({ csrfToken }: Props) => {
  const [sign, setSign] = useState<'in' | 'up'>('in');
  const [error, setError] = useState('');
  const router = useRouter();

  const handleSignInSubmit = async (event: FormEvent) => {
    event.preventDefault();
    const { email, password } = event.target as SignInFormData;
    signIn('signin', {
      csrfToken,
      email: email.value,
      password: password.value,
      redirect: false,
    }).then((response: { error: string } | undefined) => {
      if (response?.error) {
        setError(response?.error);
      } else {
        router.prefetch('/dashboard');
      }
    });
  };

  const handleSignUpSubmit = async (event: FormEvent) => {
    event.preventDefault();
    const {
      name,
      email,
      password,
      confirmPassword,
    } = event.target as SignUpFormData;
    if (password.value.length && password.value.length < 8) {
      setError('password-not-long-enough');
    } else if (password.value !== confirmPassword.value) {
      setError('passwords-do-not-match');
    } else {
      signIn('signup', {
        csrfToken,
        name: name.value,
        email: email.value,
        password: password.value,
        redirect: false,
      }).then((response: { error: string } | undefined) => {
        if (response?.error) {
          setError(response?.error);
        } else {
          router.prefetch('/dashboard');
        }
      });
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.svg" />
      </Head>

      <Particules />
      <Navbar />

      <strong style={{ color: 'red' }}>{authErrorIndex[error]}</strong>

      <main className={styles.main}>
        <div className={styles.wrapper}>
          <div className={styles.gradient} />
          <h2 className={styles.hero}>{sign === 'in' ? 'Sign in' : 'Sign up'}</h2>
          <aside className={styles.buttonContainer}>
            <button className={`${styles.iconButton} ${styles.discord}`} type="button" onClick={() => signIn('discord')}>
              Continue with
              <Image src="/icons/discord.svg" width={24} height={18} />
            </button>
            <button className={`${styles.iconButton} ${styles.google}`} type="button" onClick={() => signIn('google')}>
              Continue with
              <Image src="/icons/google.svg" width={18} height={18} />
            </button>
          </aside>
          {sign === 'in' && (
            <section>
              <form className={styles.form} method="post" action="/api/auth/callback/signin" onSubmit={handleSignInSubmit}>
                <input name="csrfToken" type="hidden" defaultValue={csrfToken} />
                <label className={styles.label} htmlFor="email">Email</label>
                <input
                  className={styles.input}
                  name="email"
                  type="email"
                  placeholder="Enter your email"
                  required
                />
                <label className={styles.label} htmlFor="password">Password</label>
                <PasswordInput
                  className={styles.input}
                  name="password"
                  placeholder="Enter your password"
                  required
                />
                <button className={styles.button} type="submit">Sign in</button>
                <p className={styles.subtext}>Don&apos;t have an account ?</p>
                <button className={styles.link} onClick={() => setSign('up')} type="button">Sign up.</button>
              </form>
            </section>
          )}
          {sign === 'up' && (
            <section>
              <form className={styles.form} method="post" action="/api/auth/callback/signup" onSubmit={handleSignUpSubmit}>
                <input name="csrfToken" type="hidden" defaultValue={csrfToken} />
                <label className={styles.label} htmlFor="name">Name</label>
                <input
                  className={styles.input}
                  name="name"
                  type="name"
                  placeholder="Enter your name"
                  required
                />
                <label className={styles.label} htmlFor="email">Email</label>
                <input
                  className={styles.input}
                  name="email"
                  type="email"
                  placeholder="Enter your email"
                  required
                />
                <label className={styles.label} htmlFor="password">Password</label>
                <PasswordInput
                  className={styles.input}
                  name="password"
                  placeholder="Enter your password"
                  required
                />
                <label className={styles.label} htmlFor="confirmPassword">Confirm password</label>
                <PasswordInput
                  className={styles.input}
                  name="confirmPassword"
                  placeholder="Confirm your password"
                  required
                />
                <button className={styles.button} type="submit">Sign up</button>
                <p className={styles.subtext}>Already have an account ?</p>
                <button className={styles.link} onClick={() => setSign('in')} type="button">Sign in.</button>
              </form>
            </section>
          )}
        </div>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getSession(context);
  if (session) {
    return {
      redirect: {
        permanent: false,
        destination: '/',
      },
      props: {},
    };
  }

  return {
    props: {
      csrfToken: await getCsrfToken(context),
    },
  };
};

export default SignIn;
