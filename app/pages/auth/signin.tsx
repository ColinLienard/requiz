import {
  FormEvent,
  useEffect,
  useRef,
  useState,
} from 'react';
import { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { signIn, getCsrfToken } from 'next-auth/react';
import authErrorIndex from '../../lib/utils/authErrorIndex';
import PasswordInput from '../../components/Common/PasswordInput/PasswordInput';
import Particules from '../../components/Common/Particules/Particules';
import styles from '../../styles/pages/Signin.module.scss';

type Value = {
  value: string,
};

interface SignInFormData extends EventTarget {
  email: Value,
  password: Value,
}

interface SignUpFormData extends EventTarget {
  name: Value,
  email: Value,
  password: Value,
  confirmPassword: Value,
}

const SignIn: NextPage = () => {
  const [sign, setSign] = useState<'in' | 'up'>('in');
  const [error, setError] = useState('');
  const csrfToken = useRef('');
  const callbackUrl = useRef('');

  useEffect(() => {
    (async () => {
      const token = await getCsrfToken();
      if (token) {
        csrfToken.current = token;
      }
    })();
    callbackUrl.current = `${window.location.origin}/dashboard`;
  }, []);

  const handleSignInSubmit = async (event: FormEvent) => {
    event.preventDefault();
    const { email, password } = event.target as SignInFormData;
    signIn('signin', {
      csrfToken,
      email: email.value,
      password: password.value,
      callbackUrl: callbackUrl.current,
    }).then((response: { error: string } | undefined) => {
      if (response?.error) {
        setError(response?.error);
      }
    });
  };

  const handleSignUpSubmit = async (event: FormEvent) => {
    event.preventDefault();
    const {
      name,
      email,
      password,
      confirmPassword,
    } = event.target as SignUpFormData;
    if (password.value.length && password.value.length < 8) {
      setError('password-not-long-enough');
    } else if (password.value !== confirmPassword.value) {
      setError('passwords-do-not-match');
    } else {
      signIn('signup', {
        csrfToken,
        name: name.value,
        email: email.value,
        password: password.value,
        callbackUrl: callbackUrl.current,
      }).then((response: { error: string } | undefined) => {
        if (response?.error) {
          setError(response?.error);
        }
      });
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Particules />
      <strong style={{ color: 'red' }}>{authErrorIndex[error]}</strong>
      <main className={styles.main}>
        <div className={styles.wrapper}>
          <div className={styles.gradient} />
          <h2 className={styles.hero}>{sign === 'in' ? 'Sign in' : 'Sign up'}</h2>
          <aside className={styles.buttonContainer}>
            <button
              className={`${styles.iconButton} ${styles.discord}`}
              type="button"
              onClick={() => signIn('discord', { callbackUrl: callbackUrl.current })}
            >
              Continue with
              <Image src="/icons/discord.svg" width={24} height={18} />
            </button>
            <button
              className={`${styles.iconButton} ${styles.google}`}
              type="button"
              onClick={() => signIn('google', { callbackUrl: callbackUrl.current })}
            >
              Continue with
              <Image src="/icons/google.svg" width={18} height={18} />
            </button>
          </aside>
          {sign === 'in' && (
            <section>
              <form className={styles.form} method="post" action="/api/auth/callback/signin" onSubmit={handleSignInSubmit}>
                <label className={styles.label} htmlFor="signInEmail">Email</label>
                <input
                  className={styles.input}
                  name="email"
                  id="signInEmail"
                  type="email"
                  placeholder="Enter your email"
                  required
                />
                <label className={styles.label} htmlFor="signInPassword">Password</label>
                <PasswordInput
                  className={styles.input}
                  name="password"
                  id="signInPassword"
                  placeholder="Enter your password"
                  required
                />
                <input className={styles.button} type="submit" value="Sign in" />
                <p className={styles.subtext}>Don&apos;t have an account ?</p>
                <button className={styles.link} onClick={() => setSign('up')} type="button">Sign up.</button>
              </form>
            </section>
          )}
          {sign === 'up' && (
            <section>
              <form className={styles.form} method="post" action="/api/auth/callback/signup" onSubmit={handleSignUpSubmit}>
                <label className={styles.label} htmlFor="signUpName">Name</label>
                <input
                  className={styles.input}
                  name="name"
                  id="signUpName"
                  type="name"
                  placeholder="Enter your name"
                  required
                />
                <label className={styles.label} htmlFor="signUpEmail">Email</label>
                <input
                  className={styles.input}
                  name="email"
                  id="signUpEmail"
                  type="email"
                  placeholder="Enter your email"
                  required
                />
                <label className={styles.label} htmlFor="signUpPassword">Password</label>
                <PasswordInput
                  className={styles.input}
                  name="password"
                  id="signUpPassword"
                  placeholder="Enter your password"
                  required
                />
                <label className={styles.label} htmlFor="signUpConfirmPassword">Confirm password</label>
                <PasswordInput
                  className={styles.input}
                  name="confirmPassword"
                  id="signUpConfirmPassword"
                  placeholder="Confirm your password"
                  required
                />
                <input className={styles.button} type="submit" value="Sign up" />
                <p className={styles.subtext}>Already have an account ?</p>
                <button className={styles.link} onClick={() => setSign('in')} type="button">Sign in.</button>
              </form>
            </section>
          )}
        </div>
      </main>
    </>
  );
};

export default SignIn;
