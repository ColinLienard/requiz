import { FormEvent, useState } from 'react';
import { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { getSession, signIn, getCsrfToken } from 'next-auth/react';
import authErrorIndex from '../../lib/utils/authErrorIndex';
import PasswordInput from '../../components/Common/PasswordInput/PasswordInput';
import Particules from '../../components/Common/Particules/Particules';
import Navbar from '../../components/Common/Navbar/Navbar';

type Props = {
  csrfToken: string
}

type Value = {
  value: string
}

interface SignInFormData extends EventTarget {
  email: Value,
  password: Value
}

interface SignUpFormData extends EventTarget {
  name: Value,
  email: Value,
  password: Value,
  confirmPassword: Value
}

const SignIn: NextPage<Props> = ({ csrfToken }: Props) => {
  const [error, setError] = useState('');
  const router = useRouter();

  const handleSignInSubmit = async (event: FormEvent) => {
    event.preventDefault();
    const { email, password } = event.target as SignInFormData;
    signIn('signin', {
      csrfToken,
      email: email.value,
      password: password.value,
      redirect: false,
    }).then((response: { error: string } | undefined) => {
      if (response?.error) {
        setError(response?.error);
      } else {
        router.push('/');
      }
    });
  };

  const handleSignUpSubmit = async (event: FormEvent) => {
    event.preventDefault();
    const {
      name,
      email,
      password,
      confirmPassword,
    } = event.target as SignUpFormData;
    if (password.value.length && password.value.length < 8) {
      setError('password-not-long-enough');
    } else if (password.value !== confirmPassword.value) {
      setError('passwords-do-not-match');
    } else {
      signIn('signup', {
        csrfToken,
        name: name.value,
        email: email.value,
        password: password.value,
        redirect: false,
      }).then((response: { error: string } | undefined) => {
        if (response?.error) {
          setError(response?.error);
        } else {
          router.push('/');
        }
      });
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Particules />
      <Navbar />
      <main>
        <p><strong>{authErrorIndex[error]}</strong></p>
        <Link href="/">
          <a>Home</a>
        </Link>
        <br />
        <br />
        <button type="button" onClick={() => signIn('discord')}>
          Sign in with Discord
        </button>
        <br />
        <button type="button" onClick={() => signIn('google')}>
          Sign in with Google
        </button>
        <h1>Sign In with credentials</h1>
        <form method="post" action="/api/auth/callback/signin" onSubmit={handleSignInSubmit}>
          <input name="csrfToken" type="hidden" defaultValue={csrfToken} />
          <label htmlFor="email">
            Email
            <input name="email" type="email" required />
          </label>
          <PasswordInput label="Password" name="password" />
          <button type="submit">Sign in</button>
        </form>
        <h2>Sign up with credentials</h2>
        <form method="post" action="/api/auth/callback/signup" onSubmit={handleSignUpSubmit}>
          <input name="csrfToken" type="hidden" defaultValue={csrfToken} />
          <label htmlFor="name">
            Name
            <input name="name" type="text" required />
          </label>
          <label htmlFor="email">
            Email
            <input name="email" type="email" required />
          </label>
          <PasswordInput label="Password" name="password" />
          <PasswordInput label="Confirm password" name="confirmPassword" />
          <button type="submit">Sign up</button>
        </form>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getSession(context);
  if (session) {
    return {
      redirect: {
        permanent: false,
        destination: '/',
      },
      props: {},
    };
  }

  return {
    props: {
      csrfToken: await getCsrfToken(context),
    },
  };
};

export default SignIn;
