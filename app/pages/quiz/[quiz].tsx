import {
  useCallback,
  useEffect,
  useState,
} from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { io, Socket } from 'socket.io-client';
import { useSession } from 'next-auth/react';
import Chat from '../../components/Quiz/Chat/Chat';
import Sidebar from '../../components/Quiz/Sidebar/Sidebar';
import ActionLines from '../../components/Quiz/ActionLines/ActionLines';
import WaitingRoom from '../../components/Quiz/WaitingRoom/WaitingRoom';
import Question from '../../components/Quiz/Question/Question';
import Results from '../../components/Quiz/Results/Results';
import Particules from '../../components/Common/Particules/Particules';
import MenuIcon from '../../public/icons/iconComponents/MenuIcon';
import SocketContext from '../../lib/contexts/SocketContext';
import useMobile from '../../lib/hooks/useMobile';
import { GameState, UserFromDB } from '../../lib/types';
import styles from '../../styles/pages/Quiz.module.scss';

const Quiz: NextPage = () => {
  const { data: session } = useSession();
  const { _id: userId, name: userName } = session?.user as UserFromDB;
  const router = useRouter();
  const { quiz } = router.query;
  const [socket, setSocket] = useState<Socket>();
  const [gameState, setGameState] = useState<GameState>('waiting');
  const [connected, setConnected] = useState(false);
  const [sidebarVisible, setSidebarVisible] = useState(false);
  const [actionLinesVisible, setActionLinesVisible] = useState(false);
  const [isMaster, setIsMaster] = useState(false);
  const isMobile = useMobile();

  useEffect(() => {
    if (process.env.NEXT_PUBLIC_SERVER_URL) {
      setSocket(io(process.env.NEXT_PUBLIC_SERVER_URL));
    } else {
      router.push('/?error=socket-connection', '/');
    }

    router.prefetch('/dashboard');

    return () => {
      socket?.close();
    };
  }, []);

  useEffect(() => {
    socket?.on('connect', () => {
      setConnected(true);

      socket?.on('error', (error: string) => {
        router.push(`/dashboard?error=${error}`, '/dashboard');
      });

      socket?.on('game-state', (newGameState: GameState) => {
        setGameState(newGameState);
      });

      socket?.on('is-master', () => {
        setIsMaster(true);
      });
    });
  }, [socket]);

  const renderGameState = useCallback(() => {
    switch (gameState) {
      case 'waiting':
        return (
          <WaitingRoom />
        );
      case 'playing':
        setTimeout(() => setActionLinesVisible(true), 1000);
        return (
          <Question isMaster={isMaster} />
        );
      case 'end':
        setTimeout(() => setActionLinesVisible(false), 1000);
        return (
          <Results />
        );
      default:
        return null;
    }
  }, [gameState]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Particules small={!isMobile} />
      <div className={styles.gradient} />
      <main className={styles.main}>
        {socket && connected && quiz && (
          <SocketContext.Provider value={socket}>
            <Sidebar
              roomId={quiz as string}
              userName={userName}
              userId={userId}
              visible={sidebarVisible}
              setVisible={setSidebarVisible}
            />
            <section className={styles.game}>
              <ActionLines visible={actionLinesVisible} />
              {isMobile && (
                <button
                  className={styles.menu}
                  type="button"
                  onClick={() => setSidebarVisible((state) => !state)}
                >
                  <MenuIcon />
                </button>
              )}
              {renderGameState()}
            </section>
            <Chat
              userName={userName}
              userId={userId}
              roomId={quiz as string}
            />
          </SocketContext.Provider>
        )}
      </main>
    </>
  );
};

export default Quiz;
