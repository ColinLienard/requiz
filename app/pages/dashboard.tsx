import { useState } from 'react';
import type { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';
import { getSession } from 'next-auth/react';
import clientPromise from '../lib/utils/mongodb';
import Game from '../components/Dashboard/Game/Game';
import User from '../components/Dashboard/User/User';
import Modal from '../components/Dashboard/Modal/Modal';
import Navbar from '../components/Common/Navbar/Navbar';
import Particules from '../components/Common/Particules/Particules';
import SearchIcon from '../public/icons/iconComponents/SearchIcon';
import objectIdToJson from '../lib/utils/objectIdToJson';
import { QuizData, QuizThemes, UserFromDB } from '../lib/types';
import PlusIcon from '../public/icons/iconComponents/PlusIcon';
import styles from '../styles/pages/Dashboard.module.scss';

type Props = {
  user: UserFromDB,
  liveQuizzes: QuizData[],
  publishedQuizzes: QuizData[],
  creators: UserFromDB[],
  userQuizzes: QuizData[],
};

const Dashboard: NextPage<Props> = ({
  user,
  liveQuizzes,
  publishedQuizzes,
  creators,
  userQuizzes,
}: Props) => {
  const [modalQuiz, setModalQuiz] = useState<QuizData>();

  const onModalClose = () => {
    setModalQuiz(undefined);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.svg" />
      </Head>

      <main className={styles.main}>
        <Navbar user={user} />
        <Particules />
        <header className={styles.header}>
          <h2 className={styles.hero}>Welcome, {user.name}.</h2>
          <div className={styles.searchInput}>
            <SearchIcon />
            <input type="text" placeholder="Search" />
          </div>
          <div className={styles.planet1}>
            <Image src="/icons/planet1.svg" alt="" width={100} height={55} />
          </div>
          <div className={styles.planet2}>
            <Image src="/icons/planet2.svg" alt="" width={40} height={40} />
          </div>
          <div className={styles.planet3}>
            <Image src="/icons/planet3.svg" alt="" width={36} height={36} />
          </div>
        </header>
        <div className={styles.gradient} />
        <Modal quiz={modalQuiz} onClose={onModalClose} />
        <h2 className={styles.title}>Live quizzes</h2>
        {liveQuizzes.length > 0
          ? (
            <ul className={styles.gameList}>
              {liveQuizzes.map((quiz) => (
                <li key={quiz._id}>
                  <Game
                    onClick={() => setModalQuiz(quiz)}
                    id={quiz._id as string}
                    title={quiz.title as string}
                    theme={quiz.theme as QuizThemes}
                    userId={quiz.userId as string}
                    peopleIn={quiz.peopleIn as number}
                    startsIn={quiz.startDate as string}
                  />
                </li>
              ))}
            </ul>
          )
          : (
            <p className={styles.text}>ðŸ¥² No quiz is live...</p>
          )}
        <h2 className={styles.title}>Quizzes that will start soon</h2>
        <ul className={styles.gameList}>
          {publishedQuizzes.map((quiz) => (
            <li key={quiz._id}>
              <Game
                onClick={() => setModalQuiz(quiz)}
                id={quiz._id as string}
                title={quiz.title as string}
                theme={quiz.theme as QuizThemes}
                userId={quiz.userId as string}
                peopleIn={quiz.peopleIn as number}
                startsIn={quiz.startDate as string}
              />
            </li>
          ))}
        </ul>
        <h2 className={styles.title}>Popular creators</h2>
        <ul className={styles.userList}>
          {creators.map((creator) => (
            <li key={creator._id}>
              <User name={creator.name} image={creator.image} />
            </li>
          ))}
        </ul>
        <h2 className={styles.title}>Your quizzes</h2>
        <ul className={styles.gameList}>
          {userQuizzes.map((quiz) => (
            <li key={quiz._id}>
              <Game
                fromUser
                id={quiz._id as string}
                title={quiz.title as string}
                theme={quiz.theme as QuizThemes}
                status={quiz.status as string}
                peopleIn={quiz.peopleIn as number}
                startsIn={quiz.startDate as string}
              />
            </li>
          ))}
        </ul>
        <Link href="/creator/new">
          <a className={styles.button}>
            <PlusIcon />
            <p>Create a new quiz</p>
          </a>
        </Link>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const session = await getSession({ req });
  if (session) {
    const client = await clientPromise;

    const liveQuizzes = await client
      .db()
      .collection('quizzes')
      .find(
        {
          status: 'waiting',
        },
        {
          projection: {
            userId: 1,
            title: 1,
            theme: 1,
            description: 1,
            startDate: 1,
            peopleIn: 1,
          },
        },
      )
      .limit(10)
      .toArray();

    const publishedQuizzes = await client
      .db()
      .collection('quizzes')
      .find(
        {
          status: 'published',
        },
        {
          projection: {
            userId: 1,
            title: 1,
            theme: 1,
            description: 1,
            startDate: 1,
          },
        },
      )
      .limit(10)
      .toArray();

    const creators = await client
      .db()
      .collection('users')
      .find()
      .limit(10)
      .toArray();

    const userQuizzes = await client
      .db()
      .collection('quizzes')
      .find(
        {
          userId: (session.user as UserFromDB)._id,
        },
        {
          projection: {
            title: 1,
            theme: 1,
            status: 1,
            startDate: 1,
          },
        },
      )
      .toArray();

    return {
      props: {
        user: session.user,
        liveQuizzes: objectIdToJson(liveQuizzes),
        publishedQuizzes: objectIdToJson(publishedQuizzes),
        creators: objectIdToJson(creators),
        userQuizzes: objectIdToJson(userQuizzes),
      },
    };
  }

  return {
    redirect: {
      destination: '/',
      permanent: false,
    },
  };
};

export default Dashboard;
