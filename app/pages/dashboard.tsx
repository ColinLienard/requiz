import { useEffect, useRef, useState } from 'react';
import type { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { getSession } from 'next-auth/react';
import clientPromise from '../lib/utils/mongodb';
import Game from '../components/Dashboard/Game/Game';
import User from '../components/Dashboard/User/User';
import Modal from '../components/Dashboard/Modal/Modal';
import Particules from '../components/Common/Particules/Particules';
import SearchIcon from '../public/icons/iconComponents/SearchIcon';
import objectIdToJson from '../lib/utils/objectIdToJson';
import quizErrorIndex from '../lib/utils/quizErrorIndex';
import { QuizData, UserFromDB } from '../lib/types';
import PlusIcon from '../public/icons/iconComponents/PlusIcon';
import styles from '../styles/pages/Dashboard.module.scss';
import Alert, { AlertHandle } from '../components/Common/Alert/Alert';

type Props = {
  user: UserFromDB,
  liveQuizzes: QuizData[],
  publishedQuizzes: QuizData[],
  creators: UserFromDB[],
  userQuizzes: QuizData[],
};

const Dashboard: NextPage<Props> = ({
  user,
  liveQuizzes,
  publishedQuizzes,
  userQuizzes,
  creators,
}: Props) => {
  const [modalQuiz, setModalQuiz] = useState<QuizData>();
  const alert = useRef<AlertHandle>(null);
  const router = useRouter();

  useEffect(() => {
    if (router.query.error) {
      alert.current?.alert(
        quizErrorIndex[router.query.error as string],
        'error',
      );
    } else if (router.query.alert) {
      alert.current?.alert(
        'Your quiz has been successfully deleted.',
        'success',
      );
    }
  }, [router.query]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Particules />
      <Alert ref={alert} />
      <div className={styles.backgroundimage}>
        <Image src="/images/landscape.svg" width={1057} height={333} priority />
      </div>
      <header className={styles.header}>
        <h2 className={styles.hero}>Welcome, {user.name}.</h2>
        <label className={styles.searchInputContainer} htmlFor="search">
          <input className={styles.searchInput} id="search" type="text" placeholder="Search" />
          <button className={styles.iconButton} type="button">
            <SearchIcon />
          </button>
        </label>
      </header>
      <div className={styles.gradient} />
      <main className={styles.main}>
        <Modal
          quiz={modalQuiz}
          onClose={() => setModalQuiz(undefined)}
        />
        <section className={styles.mainSection}>
          <h2 className={styles.title}>Live quizzes</h2>
          {liveQuizzes.length > 0
            ? (
              <ul className={styles.gameList}>
                {liveQuizzes.map((quiz) => (
                  <li key={quiz._id}>
                    <Game
                      onClick={() => setModalQuiz(quiz)}
                      title={quiz.title as QuizData['title']}
                      theme={quiz.theme as QuizData['theme']}
                      userId={quiz.userId}
                      peopleIn={quiz.peopleIn}
                      startsIn={quiz.startDate as string}
                    />
                  </li>
                ))}
              </ul>
            )
            : (
              <p className={styles.text}>ðŸ¥² No quiz is live...</p>
            )}
          <h2 className={styles.title}>Quizzes that will start soon</h2>
          <ul className={styles.gameList}>
            {publishedQuizzes.map((quiz) => (
              <li key={quiz._id}>
                <Game
                  onClick={() => setModalQuiz(quiz)}
                  title={quiz.title as QuizData['title']}
                  theme={quiz.theme as QuizData['theme']}
                  userId={quiz.userId}
                  peopleIn={quiz.peopleIn}
                  startsIn={quiz.startDate as string}
                />
              </li>
            ))}
          </ul>
          <h2 className={styles.title}>Popular creators</h2>
          <ul className={styles.userList}>
            {creators.map((creator) => (
              <li key={creator._id}>
                <User name={creator.name} image={creator.image} />
              </li>
            ))}
          </ul>
        </section>
        <hr className={styles.separator} />
        <section className={styles.sideSection}>
          <h2 className={styles.title}>Your quizzes</h2>
          {userQuizzes.length > 0 ? (
            <ul className={`${styles.gameList} ${styles.vertical}`}>
              {userQuizzes.map((quiz) => (
                <li key={quiz._id}>
                  <Game
                    fromUser
                    onClick={() => setModalQuiz(quiz)}
                    title={quiz.title as QuizData['title']}
                    theme={quiz.theme as QuizData['theme']}
                    status={quiz.status}
                    peopleIn={quiz.peopleIn}
                    startsIn={quiz.startDate as string}
                  />
                </li>
              ))}
            </ul>
          ) : (
            <p className={styles.empty}>You have not created any quiz yet.</p>
          )}
          <Link href="/creator/new">
            <a className={styles.button}>
              <PlusIcon />
              <p>Create a new quiz</p>
            </a>
          </Link>
        </section>
      </main>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const session = await getSession({ req });
  if (!session) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    };
  }

  const client = await clientPromise;

  const liveQuizzesPromise = client
    .db()
    .collection('quizzes')
    .find(
      {
        status: 'waiting',
      },
      {
        projection: {
          userId: 1,
          title: 1,
          theme: 1,
          description: 1,
          startDate: 1,
          peopleIn: 1,
        },
      },
    )
    .limit(10)
    .toArray();

  const publishedQuizzesPromise = client
    .db()
    .collection('quizzes')
    .find(
      {
        status: 'published',
      },
      {
        projection: {
          userId: 1,
          title: 1,
          theme: 1,
          description: 1,
          startDate: 1,
        },
      },
    )
    .limit(10)
    .toArray();

  const userQuizzesPromise = client
    .db()
    .collection('quizzes')
    .find(
      {
        userId: (session.user as UserFromDB)._id,
      },
      {
        projection: {
          title: 1,
          theme: 1,
          status: 1,
          description: 1,
          startDate: 1,
          peopleIn: 1,
        },
      },
    )
    .toArray();

  const creatorsPromise = client
    .db()
    .collection('users')
    .find()
    .limit(10)
    .toArray();

  const [
    liveQuizzes,
    publishedQuizzes,
    userQuizzes,
    creators,
  ] = await Promise.all([
    liveQuizzesPromise,
    publishedQuizzesPromise,
    userQuizzesPromise,
    creatorsPromise,
  ]);

  return {
    props: {
      user: session.user,
      liveQuizzes: objectIdToJson(liveQuizzes),
      publishedQuizzes: objectIdToJson(publishedQuizzes),
      userQuizzes: objectIdToJson(userQuizzes),
      creators: objectIdToJson(creators),
    },
  };
};

export default Dashboard;
